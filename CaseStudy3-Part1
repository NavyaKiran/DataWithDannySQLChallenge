select * from foodie_fi.plans;
select * from foodie_fi.subscriptions;

--PART A (Data study of some customers)

--Customer 1 had a trial plan which was then downgraded to basic monthly. 
--Customer 2 did not downgrade after trial
--Customer 11 churned. Active from 19-26 but decided to cancel subscription on 26th
--Customer 13 went from trial -> basic monthly -> pro monthy


select customer_id, foodie_fi.subscriptions.plan_id, start_date, plan_name
from foodie_fi.subscriptions left join foodie_fi.plans on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where customer_id in (1, 2, 13, 15, 16, 18, 19, 25, 39, 42);

--PART B

--How many customers has Foodie-Fi ever had?

select count(distinct customer_id) as customer_count 
from foodie_fi.subscriptions

--What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value

select count(distinct customer_id), month_start
from
(
select customer_id, date_trunc('month', start_date)::DATE as month_start
from foodie_fi.subscriptions 
left join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where plan_name = 'trial') temp 
group by month_start

--What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name

select foodie_fi.plans.plan_id, plan_name, count(distinct customer_id) as events
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where extract('year' from start_date) > '2020'
group by foodie_fi.plans.plan_id, plan_name

--What is the customer count and percentage of customers who have churned rounded to 1 decimal place?

select sum(case when plan_name = 'churn' then 1 else 0 end) as churned_customers, 
round(sum(case when plan_name = 'churn' then 1 end)*100.00/count(distinct customer_id), 1) as percentage_churn
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id

--How many customers have churned straight after their initial free trial - what percentage is this rounded to 1 decimal place?
with ranked_data as (select customer_id, foodie_fi.subscriptions.plan_id, start_date, plan_name,
rank() over(partition by customer_id order by start_date) as rn 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id)

select sum(case when (plan_name = 'churn' and rn = 2) then 1 else 0 end) as churned_customers, 
round(100.0 * sum(case when (plan_name = 'churn' and rn = 2) then 1 else 0 end)/count(distinct customer_id) , 1)as churn_percent
from ranked_data

--What is the number and percentage of customer plans after their initial free trial?
with cte as (select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date, rank() over(partition by customer_id order by start_date) as rn 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id)

select plan_id, plan_name, count(distinct customer_id) as customer_count, 
round((count(distinct customer_id)*100.0/(select count(distinct customer_id) from cte)), 1) as percent
from cte 
where rn = 2
group by plan_id, plan_name


--What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?

with cte as (select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date, 
rank() over(partition by customer_id order by start_date desc) as rn 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where start_date <= '2020-12-31')

select plan_id, plan_name, count(distinct customer_id) as customers, 
round(count(distinct customer_id)*100.0/(select count(distinct customer_id) from cte), 1) as percent
from cte 
where rn = 1
group by plan_id, plan_name

--How many customers have upgraded to an annual plan in 2020?

select count( distinct customer_id) as customer_count
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where extract('year' from start_date) = '2020' and plan_name = 'pro annual'

--How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?

with trial_plans as (select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where plan_name = 'trial'), 

annual_plans as (
select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where plan_name = 'pro annual'
)
,
days as 
(select a.customer_id, b.start_date::DATE - a.start_date::DATE as number_of_days
from trial_plans a inner join annual_plans b on a.customer_id = b.customer_id)

select round(avg(number_of_days), 2) as avg_days 
from days

--Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc)


with trial_plans as (select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where plan_name = 'trial'), 

annual_plans as (
select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date 
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id
where plan_name = 'pro annual'
)

select days, count(distinct customer_id) as customers 
from (
select customer_id, concat((bucket_value*30)+1, '-', (bucket_value+1)*30, ' days') as days 
from 
(select a.customer_id, b.start_date::DATE - a.start_date::DATE as number_of_days, 
floor((b.start_date::DATE - a.start_date::DATE)/30) as bucket_value
from trial_plans a inner join annual_plans b on a.customer_id = b.customer_id) temp) temp1 
group by days
order by customers desc

--How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

with cte as (select customer_id, foodie_fi.subscriptions.plan_id, plan_name, start_date, 
lead(plan_name) over(partition by customer_id order by start_date, foodie_fi.subscriptions.plan_id) as next_plan
from foodie_fi.subscriptions 
inner join foodie_fi.plans 
on foodie_fi.subscriptions.plan_id = foodie_fi.plans.plan_id)

select count(distinct customer_id) as customers
from cte 
where plan_name = 'pro monthly' and next_plan = 'basic monthly'















